%skeleton "lalr1.cc" /* -*- C++ -*- */
%require "3.0.4"
%defines
%define api.parser.class {umlrParser}
%define api.token.constructor
%define api.value.type variant
%define parse.assert
%code requires
{
# include <string>
class umlrDriver;
}
// The parsing context.
%param { umlrDriver& driver }
%locations
%initial-action {
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &driver.file;
};
%define parse.trace
%define parse.error verbose
%code {
   #include "umlrDriver.hh"
   using namespace std;
}
%define api.token.prefix {TOK_}
%token
  END  0  "end of file"
  MINUS   "-"
  PLUS    "+"
  STAR    "*"
  SLASH   "/"
;

%token <std::string> ASSIGN
%token <std::string> ASSIGNG
%token <std::string> LPAR
%token <std::string> RPAR
%token <std::string> LBRA
%token <std::string> RBRA
%token <std::string> LIDX
%token <std::string> RIDX
%token <std::string> LIDX2
%token <std::string> RIDX2
%token <std::string> DOLLAR

%token <std::string> FUNCTION
%token <std::string> R6CLASS
%token <std::string> IF
%token <std::string> IFELSE
%token <std::string> ELSE
%token <std::string> LIBRARY
%token <std::string> PUBLIC
%token <std::string> PRIVATE
%token <std::string> LIST
%token <std::string> INIT
%token <std::string> DEST
%token <std::string> TRUE
%token <std::string> FALSE
%token <std::string> NULL
%token <std::string> NA

%token <std::string> IDENTIFIER "identifier"
%token <std::string> ID
%token <std::string> STRING
%token <std::string> ALGO

%token <int> NUMBER "number"
%type  <int> exp
%type <std::string> cosas
%type <std::string> cosa

%printer { yyoutput << $$; } <*>;
%%
// %start unit;
%start rfile;

rfile: cosas { cout << "Acabado\n"; } // { driver.result = $1; }
     ;
     
cosas: %empty                 { cout << "Vacio\n"; }
     | cosas cosa {}
     ;

cosa: ID         { $$ = $1; cout << "Id: " << $1 << "\n"; }
    | ALGO       { $$ = $1;  }
    | STRING     { $$ = $1; cout << "Cadena\n"; }
    | FUNCTION   { $$ = $1; cout << "Function\n"; }
    | R6CLASS    { $$ = $1; cout << "Clase\n";    }    
    ;
         
unit: assignments exp  { driver.result = $2; };

assignments:
  %empty                 {}
| assignments assignment {};

assignment:
  "identifier" ":=" exp { driver.variables[$1] = $3; };

%left "+" "-";
%left "*" "/";
exp:
  exp "+" exp   { $$ = $1 + $3; }
| exp "-" exp   { $$ = $1 - $3; }
| exp "*" exp   { $$ = $1 * $3; }
| exp "/" exp   { $$ = $1 / $3; }
| "(" exp ")"   { /*JGG std::swap ($$, $2); */ $$ = $2; }
| "identifier"  { $$ = driver.variables[$1]; }
| "number"      { /*JGG std::swap ($$, $1); */ $$ = $1; };

%%
void yy::umlrParser::error (const location_type& l, const std::string& m) {
  driver.error (l, m);
}
