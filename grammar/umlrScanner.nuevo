%{ /* -*- C++ -*- */ 
# include <cerrno>
# include <climits>
# include <cstdlib>
# include <string>
# include "umlrDriver.hh"
# include "umlrParser.hpp"

# undef yywrap
# define yywrap() 1

// The location of the current token.
static yy::location loc;
%}

%option noyywrap nounput batch debug noinput
%option stack

id    [a-zA-Z_\.][a-zA-Z_\.0-9]*
int   [0-9]+
blank [ \t]

%{
  // Code run each time a pattern is matched.
  #define YY_USER_ACTION  loc.columns (yyleng);
%}

%x COMMENT

%%
%{ loc.step (); %}

<<EOF>>    { return yy::umlrParser::make_END(loc); }
"#"        { BEGIN(COMMENT); }  
{blank}+   { loc.step (); }
["\\n"]+      { loc.lines (yyleng); loc.step (); }


{id}       { return yy::umlrParser::make_ID(yytext, loc); }
[.]+       { return yy::umlrParser::make_ALGO(yytext, loc);  }

<COMMENT> {
  {blank}+    { /* Eat */ }
  "\\n"       { loc.lines (yyleng); loc.step (); BEGIN(INITIAL); }
  [.]+        { /* Eat */ }
} 

%%

void umlrDriver::scan_begin () {
   yy_flex_debug = trace_scanning;
   if (file.empty () || file == "-") {
       yyin = stdin;
   } else if (!(yyin = fopen (file.c_str (), "r"))) {
              error ("cannot open " + file + ": " + strerror(errno));
              exit (EXIT_FAILURE);
   }
}

void umlrDriver::scan_end () {
  fclose (yyin);
}

